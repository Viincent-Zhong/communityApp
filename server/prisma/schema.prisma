// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Prisma generate 
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// If need to change the database schemas, run the following command
// npx prisma migrate dev --name init

model User {
  id        Int @id @default(autoincrement())

  email     String    @unique
  name      String
  password  String
  description String @default("")

  likeCounter Int @default(0) // Number of likes

  chats     Chat[]    // All chats created by this user
  meetings  Meeting[] // All meetings created by this user
  sells     Sells[]   // All sells created by this user

  othersComments  Comment[] @relation("Profile") // All comments created by others to this user
  comments  Comment[] @relation("Creator") // All comments created by this user
  createdAt DateTime  @default(now())
}

model Like {
  id        Int @id @default(autoincrement())
  userId    Int // Me (who liked)
  targetId  Int // You (Who got liked)
}

model Chat {
  id        Int @id @default(autoincrement())

  title     String
  content   String

  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int

  comments  Comment[] // All comments on this chat
  createdAt DateTime  @default(now())
}

model Meeting {
  id        Int @id @default(autoincrement())

  title     String
  content   String

  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int

  date      String

  comments  Comment[] // All comments on this chat
  createdAt DateTime  @default(now())
}

model Sells {
  id        Int @id @default(autoincrement())

  title     String
  content   String

  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int

  date      String

  item      String
  quantity  Int
  price     Int

  comments  Comment[] // All comments on this chat
  createdAt DateTime  @default(now())
}

model Comment {
  id        Int @id @default(autoincrement())
  
  content   String
  likes     Int @default(0)

  createdBy User      @relation("Creator", fields: [createdById], references: [id])
  createdById Int     // 

  chat      Chat?     @relation(fields: [chatId], references: [id]) // Comment attached to a chat
  chatId    Int?      // 

  meeting      Meeting?     @relation(fields: [meetingId], references: [id]) // Comment attached to a meeting
  meetingId    Int?      // 

  sells      Sells?     @relation(fields: [sellsId], references: [id]) // Comment attached to a sells
  sellsId    Int?      // 

  profile   User?     @relation("Profile", fields: [profileId], references: [id]) // Comment attached to a profile
  profileId Int?      // 

  createdAt DateTime  @default(now())
}
